version: '3.7'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
  elastic:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
  workspace:
    build:
      context: ./workspace
      args:
        - CONTROLLA_DEV_ENVIROMENT=${CONTROLLA_DEV_ENVIROMENT}
        - SHELL_OH_MY_ZSH=${SHELL_OH_MY_ZSH}
        - SHELL_OH_MY_ZSH_AUTOSUGESTIONS=${SHELL_OH_MY_ZSH_AUTOSUGESTIONS}
        - SHELL_OH_MY_ZSH_ALIASES=${SHELL_OH_MY_ZSH_ALIASES}
        - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
        - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - docker-in-docker:/certs/client
      - ./php-worker/supervisord.d:/etc/supervisord.d
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
      - "${WORKSPACE_BROWSERSYNC_HOST_PORT}:3000"
      - "${WORKSPACE_BROWSERSYNC_UI_HOST_PORT}:3001"
      - "${WORKSPACE_VUE_CLI_SERVE_HOST_PORT}:8080"
      - "${WORKSPACE_VUE_CLI_UI_HOST_PORT}:8000"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2376
      - DOCKER_TLS_VERIFY=1
      - DOCKER_TLS_CERTDIR=/certs
      - DOCKER_CERT_PATH=/certs/client
      - CHOKIDAR_USEPOLLING=true
    networks:
      - frontend
      - backend
    links:
      - docker-in-docker

### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:20.10-dind
    environment:
      DOCKER_TLS_SAN: DNS:docker-in-docker
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - docker-in-docker:/certs/client
    expose:
      - 2375
    networks:
      - backend

### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

### pgAdmin ##############################################
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
      - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - ${DATA_PATH_HOST}/pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - frontend
      - backend

### ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    container_name: elasticsearch
    restart: always
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node    
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elastic
    volumes:
      - 'elasticsearch:/usr/share/elasticsearch/data'

# ### Logstash ##############################################
#   logstash:
#     build:
#       context: ./logstash
#       args:
#         - ELK_VERSION=${ELK_VERSION}
#     container_name: logstash
#     environment:
#       - "ELASTIC_PASSWORD=elastic"
#     ports: ['9600:9600']
#     depends_on: ['elasticsearch']
#     volumes:
#       - type: bind
#         source: ./logstash_pipeline/
#         target: /usr/share/logstash/pipeline
#         read_only: true

# ### Filebeat ##############################################
#   filebeat:
#     build:
#       context: ./filebeat
#       args:
#         - ELK_VERSION=${ELK_VERSION}
#     container_name: filebeat
#     environment:
#       - "ELASTIC_PASSWORD=elastic"
#     user: root
#     volumes:
#       - './var/filebeat/log/:/var/log/:ro'
#       - './var/filebeat/docker.sock:/var/run/docker.sock'
#       - './var/logs/:/var/lib/docker/containers/logs:ro'
#       - './etc/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml'
#     command: ["--strict.perms=false"]

### Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    container_name: kibana
    restart: always
    ports: ['5601:5601']
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200  
    depends_on:
      - elasticsearch
    networks:
      - elastic

